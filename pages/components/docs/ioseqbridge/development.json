[
  {
    "title": "AudioEqPlugin (Flutter to iOS Bridge)",
    "version": "1.0.0"
  },
  {
    "description": "The AudioEqPlugin is a custom Flutter plugin written in Swift that integrates with iOS's AVAudioEngine and AVAudioUnitEQ to provide real-time equalizer control, playback handling, AirPlay support, and Now Playing integration."
  },
  {
    "smallLabel": "Plugin Overview"
  },
  {
    "text": "The plugin exposes audio playback and equalizer functionality to Flutter through a MethodChannel and streams updates (like playback position and errors) back to Flutter using an EventChannel."
  },
  {
    "smallLabel": "Now Playing Info"
  },
  {
    "text": "To keep the system media controls up to date (Control Center, lock screen), we provide an `updateNowPlayingInfo` function that updates metadata such as title, artist, album, artwork, playback duration, and elapsed time."
  },
  {
    "codeSnippet": {
      "type": "swift",
      "data": "private func updateNowPlayingInfo(title: String, artist: String, album: String, artwork: UIImage?, duration: Double, currentTime: Double) {\n    var nowPlayingInfo: [String: Any] = [\n        MPMediaItemPropertyTitle: title,\n        MPMediaItemPropertyArtist: artist,\n        MPMediaItemPropertyAlbumTitle: album,\n        MPMediaItemPropertyPlaybackDuration: duration,\n        MPNowPlayingInfoPropertyElapsedPlaybackTime: currentTime,\n        MPNowPlayingInfoPropertyPlaybackRate: 1.0,\n    ]\n    MPNowPlayingInfoCenter.default().nowPlayingInfo = nowPlayingInfo\n}"
    }
  },
  {
    "smallLabel": "Audio Engine Setup"
  },
  {
    "text": "The `setupAudioEngine` function initializes the AVAudioEngine, attaches an AVAudioPlayerNode for playback, and configures a 10-band AVAudioUnitEQ with parametric filters. Each band is assigned a frequency from 32 Hz to 16 kHz and default gain of 0 dB."
  },
  {
    "codeSnippet": {
      "type": "swift",
      "data": "private func setupAudioEngine() {\n    audioEngine = AVAudioEngine()\n    audioPlayerNode = AVAudioPlayerNode()\n    eqNode = AVAudioUnitEQ(numberOfBands: 10)\n\n    let frequencies: [Float] = [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000]\n\n    for (index, band) in eqNode.bands.enumerated() {\n        band.filterType = .parametric\n        band.frequency = frequencies[index]\n        band.gain = 0\n        band.bandwidth = 1.0\n        band.bypass = false\n    }\n\n    audioEngine.attach(audioPlayerNode)\n    audioEngine.attach(eqNode)\n    audioEngine.connect(audioPlayerNode, to: eqNode, format: nil)\n    audioEngine.connect(eqNode, to: audioEngine.mainMixerNode, format: nil)\n}"
    }
  },
  {
    "smallLabel": "Flutter Methods"
  },
  {
    "list": [
      "\"playAudio\": Plays a given audio file using AVAudioEngine and AVAudioPlayerNode.",
      "\"getLength\": Returns the duration of the currently loaded audio file.",
      "\"seek\": Seeks to a given position in the audio track and resumes playback if requested.",
      "\"togglePlay\": Pauses or resumes playback and manages timers for sending playback position.",
      "\"setNowPlayingInfo\": Updates iOS Now Playing Center metadata with track details.",
      "\"setEQBand\": Adjusts the gain of a specific EQ band (–16 dB to +16 dB).",
      "\"showAirPlayPicker\" / \"hideAirPlayPicker\": Shows or hides the iOS AirPlay route picker."
    ]
  },
  {
    "smallLabel": "Playback Control"
  },
  {
    "text": "The `playAudio` method configures the AVAudioSession for playback, loads the audio file into AVAudioFile, schedules it with AVAudioPlayerNode, and starts the audio engine. It also starts a timer to stream back the playback position to Flutter."
  },
  {
    "smallLabel": "Seek Functionality"
  },
  {
    "text": "The `seek` method allows repositioning playback within the audio file by calculating the correct AVAudioFramePosition, scheduling the remaining segment, and resuming playback without restarting the engine."
  },
  {
    "smallLabel": "Equalizer Control"
  },
  {
    "text": "The `setEQBand` method validates the band index and sets the gain for the specified frequency band in real-time. Invalid band indices return a FlutterError."
  },
  {
    "codeSnippet": {
      "type": "swift",
      "data": "private func setEQBand(bandIndex: Int, gain: Float) -> Bool {\n    guard bandIndex >= 0 && bandIndex < eqNode.bands.count else { return false }\n    eqNode.bands[bandIndex].gain = gain\n    return true\n}"
    }
  },
  {
    "smallLabel": "Event Streaming"
  },
  {
    "text": "Playback position and error updates are streamed back to Flutter using an EventChannel. A timer polls the AVAudioPlayerNode's current render time and sends updates every 0.5 seconds."
  },
  {
    "smallLabel": "AirPlay Support"
  },
  {
    "text": "The plugin supports showing and hiding the iOS AirPlay picker with customizable tint colors, allowing users to stream audio to external devices such as Apple TV or AirPods."
  },
  {
    "smallLabel": "Remote Control Center"
  },
  {
    "text": "The plugin integrates with MPRemoteCommandCenter to handle play, pause, and stop commands from external sources (Control Center, headphones, etc.)."
  },
  {
    "list": [
      "Play → resumes audio playback",
      "Pause → pauses playback",
      "Stop → stops playback completely"
    ]
  },
  {
    "smallLabel": "Challenges"
  },
  {
    "list": [
      "Managing AVAudioEngine restarts when other apps interfere with audio sessions.",
      "Ensuring seamless playback when seeking within large files.",
      "Balancing EQ band responsiveness with performance in real time.",
      "Keeping Flutter state synchronized with iOS playback state."
    ]
  },
  {
    "text": "Overall, the AudioEqPlugin enables a full-featured, real-time equalizer with playback controls and system integration, bridging Flutter apps to iOS’s powerful AVFoundation framework."
  }
]
